{
	"variables": [],
	"info": {
		"name": "TMForum - ProductInventoryManagement API CTK",
		"_postman_id": "1a6c254b-8ae7-8766-0583-45ad2fcb23c1",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "TC_Prod_E1 - Unknown Product Identifier",
			"description": "The API should return a 404 in the event it is invoked with a product ID that is not recognised",
			"item": [
				{
					"name": "/product/{unknown}",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// DATA",
									"var receivedData = JSON.parse(responseBody);",
									"var requiredFields = [\"id\",\"name\",\"status\",\"isBundle\",\"isCustomerVisible\",\"productOffering\"];",
									"",
									"//TESTS",
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"//PREPARATION FOR FOLLOWING TESTS",
									"",
									"",
									"//HELPING FUNCTIONS",
									"/* testing for equality v2 may have more properties than v1 but not less */",
									"function objectEquals(v1, v2) {",
									"    if (typeof(v1) === \"function\") {",
									"        return v1.toString() === v2.toString();",
									"    }",
									"    else if (v1 instanceof Object && v2 instanceof Object) {",
									"        var r = true;",
									"        for (var k in v1) {",
									"            r = objectEquals(v1[k], v2[k]);",
									"            if (!r) {",
									"                //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;",
									"                //tests[\"type1 \" + typeof(v1[k]) + \" type2 \" + typeof(v2[k])] = false;",
									"                return false;",
									"            }",
									"        }",
									"        return true;",
									"    }",
									"    else return v1 === v2;",
									"}",
									"",
									"function findElementInList(elementId,list){",
									"    for (var i = 0; i < list.length; i++){",
									"        if (list[i].id == elementId)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldInBody(field,body){",
									"    for (var key in body){",
									"        if (key == field)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldsInBody(fields,body){",
									"    if (Object.prototype.toString.call(body) === '[object Array]'){",
									"        for (var i = 0; i < body.length; i++){",
									"            findFieldsInBody(fields,body[i]);",
									"        }",
									"    }",
									"    else for (var k = 0; k < fields.length; k++){",
									"        if (!findFieldInBody(fields[k],body)){",
									"            tests[\"An element is missing the field \" + fields[k]] = false;",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"function getPositionOfElementInList(elementId,list){",
									"    for (var i = 0; i < list.length; i++){",
									"        if (list[i].id == elementId)",
									"            return i;",
									"    }",
									"    return -1;",
									"}",
									"",
									"function getUrlFromEnvironment(url){",
									"    if (url.indexOf('{{') >= 0){",
									"        part1 = url.substring(0,url.indexOf('{{'));",
									"        part2 = url.substring(url.indexOf('{{')+2,url.indexOf('}}'));",
									"        part3 = url.substring(url.indexOf('}}')+2,url.length);",
									"        return getUrlFromEnvironment(part1) + getUrlFromEnvironment(environment[part2]) + getUrlFromEnvironment(part3);",
									"    }",
									"    else return url;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{productInventoryApi}}/product/10000000",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"sdfsdf\",\r\n    \"description\": \"sdfsdf\",\r\n    \"isBundle\": false,\r\n    \"lifecycleStatus\": \"Active\",\r\n    \"validFor\":\r\n    {\r\n        \"startDateTime\": \"2020-01-20T00:00:00.000+0000\",\r\n        \"endDateTime\": \"2050-01-20T00:00:00.000+0000\"\r\n    },\r\n    \"productSpecification\":\r\n     {\r\n        \"id\": \"11\",\r\n        \"name\": \"Product11\"\r\n    },\r\n    \"version\": \"2.0\"\r\n}\r\n"
						},
						"description": "retrieve Product with unknown id"
					},
					"response": []
				}
			]
		},
		{
			"name": "TC_Prod_E2 - Invalid request - Missing mandatory Parameter",
			"description": "The Product creation request has failed due to missing parameter(s)",
			"item": [
				{
					"name": "/product",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// DATA",
									"var receivedData = JSON.parse(responseBody);",
									"var requiredFields = [\"id\",\"name\",\"status\",\"isBundle\",\"isCustomerVisible\",\"productOffering\"];",
									"",
									"//TESTS",
									"tests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\")",
									"tests[\"Status code is 4xx\"] = responseCode.code >= 400;",
									"",
									"//PREPARATION FOR FOLLOWING TESTS",
									"",
									"",
									"//HELPING FUNCTIONS",
									"/* testing for equality v2 may have more properties than v1 but not less */",
									"function objectEquals(v1, v2) {",
									"    if (typeof(v1) === \"function\") {",
									"        return v1.toString() === v2.toString();",
									"    }",
									"    else if (v1 instanceof Object && v2 instanceof Object) {",
									"        var r = true;",
									"        for (var k in v1) {",
									"            r = objectEquals(v1[k], v2[k]);",
									"            if (!r) {",
									"                //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;",
									"                //tests[\"type1 \" + typeof(v1[k]) + \" type2 \" + typeof(v2[k])] = false;",
									"                return false;",
									"            }",
									"        }",
									"        return true;",
									"    }",
									"    else return v1 === v2;",
									"}",
									"",
									"function findElementInList(elementId,list){",
									"    for (var i = 0; i < list.length; i++){",
									"        if (list[i].id == elementId)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldInBody(field,body){",
									"    for (var key in body){",
									"        if (key == field)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldsInBody(fields,body){",
									"    if (Object.prototype.toString.call(body) === '[object Array]'){",
									"        for (var i = 0; i < body.length; i++){",
									"            findFieldsInBody(fields,body[i]);",
									"        }",
									"    }",
									"    else for (var k = 0; k < fields.length; k++){",
									"        if (!findFieldInBody(fields[k],body)){",
									"            tests[\"An element is missing the field \" + fields[k]] = false;",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"function getPositionOfElementInList(elementId,list){",
									"    for (var i = 0; i < list.length; i++){",
									"        if (list[i].id == elementId)",
									"            return i;",
									"    }",
									"    return -1;",
									"}",
									"",
									"function getUrlFromEnvironment(url){",
									"    if (url.indexOf('{{') >= 0){",
									"        part1 = url.substring(0,url.indexOf('{{'));",
									"        part2 = url.substring(url.indexOf('{{')+2,url.indexOf('}}'));",
									"        part3 = url.substring(url.indexOf('}}')+2,url.length);",
									"        return getUrlFromEnvironment(part1) + getUrlFromEnvironment(environment[part2]) + getUrlFromEnvironment(part3);",
									"    }",
									"    else return url;",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{productInventoryApi}}/product",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"description\": \"Description of the instantiated handset product\", \r\n\"status\": \"active\", \r\n\"productSerialNumber\": \"59745034OOR030\", \r\n\"startDate\": \"\", \r\n\"orderDate\": \"2013-07-21 06:16:39ZGMT+1\", \r\n\"terminationDate\": \"\",\r\n\"productOffering\": []\r\n}"
						},
						"description": "Server returns 4xx error when Product creation request is missing mandatory information"
					},
					"response": []
				}
			]
		},
		{
			"name": "TC_Prod_N1 - Create new Product with minimum required information",
			"description": "A new product will be created with minimal required information, API returns success code (200)",
			"item": [
				{
					"name": "/product",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (responseCode.code < 400){",
									"    // DATA",
									"    var receivedData = JSON.parse(responseBody);",
									"    var id = receivedData.id;",
									"    var sentData = JSON.parse(request.data);",
									"    var requiredFields = [\"id\",\"name\",\"description\",\"status\",\"isBundle\",\"isCustomerVisible\",\"productOffering\"];",
									"",
									"    //TESTS",
									"    tests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\")",
									"    tests[\"Response contains ID\"] = findFieldInBody('id',receivedData);",
									"    tests[\"Response contains all required fields\"] = findFieldsInBody(requiredFields,receivedData);",
									"    tests[\"Response contains location header\"] = responseHeaders.hasOwnProperty(\"Location\");",
									"    tests[\"Location header is correct\"] = responseHeaders.hasOwnProperty(\"Location\") && (postman.getResponseHeader(\"Location\").toString() == \"/product/\"+id || //relative",
									"    postman.getResponseHeader(\"Location\").toString() == getUrlFromEnvironment('{{productInventoryApi}}') + \"/product/\"+id);   //absolute",
									"    tests[\"POST Body Response equals Request Body\"] = objectEquals(sentData, receivedData);",
									"",
									"    //PREPARATION FOR FOLLOWING TESTS",
									"    postman.setGlobalVariable(\"productId\", receivedData.id.toString());",
									"    postman.setGlobalVariable(\"productRequest\", request.data);",
									"    ",
									"}",
									"",
									"//HELPING FUNCTIONS",
									"/* testing for equality v2 may have more properties than v1 but not less */",
									"function objectEquals(v1, v2) {",
									"    if (typeof(v1) === \"function\") {",
									"        return v1.toString() === v2.toString();",
									"    }",
									"    else if (v1 instanceof Object && v2 instanceof Object) {",
									"        var r = true;",
									"        for (var k in v1) {",
									"            r = objectEquals(v1[k], v2[k]);",
									"            if (!r) {",
									"                //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;",
									"                //tests[\"type1 \" + typeof(v1[k]) + \" type2 \" + typeof(v2[k])] = false;",
									"                return false;",
									"            }",
									"        }",
									"        return true;",
									"    }",
									"    else return v1 === v2;",
									"}",
									"",
									"function findElementInList(elementId,list){",
									"    for (var i = 0; i < list.length; i++){",
									"        if (list[i].id == elementId)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldInBody(field,body){",
									"    for (var key in body){",
									"        if (key == field)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldsInBody(fields,body){",
									"    if (Object.prototype.toString.call(body) === '[object Array]'){",
									"        for (var i = 0; i < body.length; i++){",
									"            findFieldsInBody(fields,body[i]);",
									"        }",
									"    }",
									"    else for (var k = 0; k < fields.length; k++){",
									"        if (!findFieldInBody(fields[k],body)){",
									"            tests[\"An element is missing the field \" + fields[k]] = false;",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"function getPositionOfElementInList(elementId,list){",
									"    for (var i = 0; i < list.length; i++){",
									"        if (list[i].id == elementId)",
									"            return i;",
									"    }",
									"    return -1;",
									"}",
									"",
									"function getUrlFromEnvironment(url){",
									"    if (url.indexOf('{{') >= 0){",
									"        part1 = url.substring(0,url.indexOf('{{'));",
									"        part2 = url.substring(url.indexOf('{{')+2,url.indexOf('}}'));",
									"        part3 = url.substring(url.indexOf('}}')+2,url.length);",
									"        return getUrlFromEnvironment(part1) + getUrlFromEnvironment(environment[part2]) + getUrlFromEnvironment(part3);",
									"    }",
									"    else return url;",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{productInventoryApi}}/product",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Samsung Galaxy S4\",\r\n\t\"description\": \"Description of the instantiated handset product\",\r\n\t\"status\": \"Created\",\r\n\t\"isBundle\": \"false\",\r\n\t\"isCustomerVisible\":\"false\",\r\n\t\"productSerialNumber\": \"59745034OOR030\",\r\n\t\"productOffering\": {\r\n\t\t\"id\": \"http://server:port/catalogApi/productOffering/22\",\r\n\t\t\"name\": \"My Quick BB Offer\"\r\n\t}\r\n}\r\n"
						},
						"description": "Server returns 4xx error when Product creation request is missing mandatory information"
					},
					"response": []
				},
				{
					"name": "/product",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// DATA",
									"var receivedData = JSON.parse(responseBody);",
									"var id = postman.getGlobalVariable(\"productId\");",
									"var lastRequest = JSON.parse(postman.getGlobalVariable(\"productRequest\"));",
									"var requiredFields = [\"id\",\"name\",\"description\",\"status\",\"isBundle\",\"isCustomerVisible\",\"productOffering\"];",
									"",
									"//TESTS",
									"tests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response contains all required fields\"] = findFieldsInBody(requiredFields,receivedData);",
									"tests[\"Response contains created resource\"] = findElementInList(id, receivedData);",
									"tests[\"Element contained equals previous creation\"] = objectEquals(lastRequest, receivedData[getPositionOfElementInList(id, receivedData)]);",
									"",
									"//PREPARATION FOR FOLLOWING TESTS",
									"",
									"",
									"//HELPING FUNCTIONS",
									"/* testing for equality v2 may have more properties than v1 but not less */",
									"function objectEquals(v1, v2) {",
									"    if (typeof(v1) === \"function\") {",
									"        return v1.toString() === v2.toString();",
									"    }",
									"    else if (v1 instanceof Object && v2 instanceof Object) {",
									"        var r = true;",
									"        for (var k in v1) {",
									"            r = objectEquals(v1[k], v2[k]);",
									"            if (!r) {",
									"                //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;",
									"                //tests[\"type1 \" + typeof(v1[k]) + \" type2 \" + typeof(v2[k])] = false;",
									"                return false;",
									"            }",
									"        }",
									"        return true;",
									"    }",
									"    else return v1 === v2;",
									"}",
									"",
									"function findElementInList(elementId,list){",
									"    for (var i = 0; i < list.length; i++){",
									"        if (list[i].id == elementId)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldInBody(field,body){",
									"    for (var key in body){",
									"        if (key == field)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldsInBody(fields,body){",
									"    if (Object.prototype.toString.call(body) === '[object Array]'){",
									"        for (var i = 0; i < body.length; i++){",
									"            findFieldsInBody(fields,body[i]);",
									"        }",
									"    }",
									"    else for (var k = 0; k < fields.length; k++){",
									"        if (!findFieldInBody(fields[k],body)){",
									"            tests[\"An element is missing the field \" + fields[k]] = false;",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"function getPositionOfElementInList(elementId,list){",
									"    for (var i = 0; i < list.length; i++){",
									"        if (list[i].id == elementId)",
									"            return i;",
									"    }",
									"    return -1;",
									"}",
									"",
									"function getUrlFromEnvironment(url){",
									"    if (url.indexOf('{{') >= 0){",
									"        part1 = url.substring(0,url.indexOf('{{'));",
									"        part2 = url.substring(url.indexOf('{{')+2,url.indexOf('}}'));",
									"        part3 = url.substring(url.indexOf('}}')+2,url.length);",
									"        return getUrlFromEnvironment(part1) + getUrlFromEnvironment(environment[part2]) + getUrlFromEnvironment(part3);",
									"    }",
									"    else return url;",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{productInventoryApi}}/product",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/product/{{id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// DATA",
									"var receivedData = JSON.parse(responseBody);",
									"var id = postman.getGlobalVariable(\"productId\");",
									"var lastRequest = JSON.parse(postman.getGlobalVariable(\"productRequest\"));",
									"var requiredFields = [\"id\",\"name\",\"description\",\"status\",\"isBundle\",\"isCustomerVisible\",\"productOffering\"];",
									"",
									"//TESTS",
									"tests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response contains ID\"] = findFieldInBody('id',receivedData);",
									"tests[\"Response contains all required fields\"] = findFieldsInBody(requiredFields,receivedData);",
									"tests[\"ID is correct\"] = receivedData.id.toString() == id;",
									"tests[\"Body Response equals previous creation\"] = objectEquals(lastRequest, receivedData);",
									"//PREPARATION FOR FOLLOWING TESTS",
									"",
									"",
									"//HELPING FUNCTIONS",
									"/* testing for equality v2 may have more properties than v1 but not less */",
									"function objectEquals(v1, v2) {",
									"    if (typeof(v1) === \"function\") {",
									"        return v1.toString() === v2.toString();",
									"    }",
									"    else if (v1 instanceof Object && v2 instanceof Object) {",
									"        var r = true;",
									"        for (var k in v1) {",
									"            r = objectEquals(v1[k], v2[k]);",
									"            if (!r) {",
									"                //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;",
									"                //tests[\"type1 \" + typeof(v1[k]) + \" type2 \" + typeof(v2[k])] = false;",
									"                return false;",
									"            }",
									"        }",
									"        return true;",
									"    }",
									"    else return v1 === v2;",
									"}",
									"",
									"function findElementInList(elementId,list){",
									"    for (var i = 0; i < list.length; i++){",
									"        if (list[i].id == elementId)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldInBody(field,body){",
									"    for (var key in body){",
									"        if (key == field)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldsInBody(fields,body){",
									"    if (Object.prototype.toString.call(body) === '[object Array]'){",
									"        for (var i = 0; i < body.length; i++){",
									"            findFieldsInBody(fields,body[i]);",
									"        }",
									"    }",
									"    else for (var k = 0; k < fields.length; k++){",
									"        if (!findFieldInBody(fields[k],body)){",
									"            tests[\"An element is missing the field \" + fields[k]] = false;",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"function getPositionOfElementInList(elementId,list){",
									"    for (var i = 0; i < list.length; i++){",
									"        if (list[i].id == elementId)",
									"            return i;",
									"    }",
									"    return -1;",
									"}",
									"",
									"function getUrlFromEnvironment(url){",
									"    if (url.indexOf('{{') >= 0){",
									"        part1 = url.substring(0,url.indexOf('{{'));",
									"        part2 = url.substring(url.indexOf('{{')+2,url.indexOf('}}'));",
									"        part3 = url.substring(url.indexOf('}}')+2,url.length);",
									"        return getUrlFromEnvironment(part1) + getUrlFromEnvironment(environment[part2]) + getUrlFromEnvironment(part3);",
									"    }",
									"    else return url;",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{productInventoryApi}}/product/{{productId}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "TC_Prod_N2 - Update representation of an existing Product",
			"description": "Patch an existing Product. Server returns success (200)",
			"item": [
				{
					"name": "/product",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (responseCode.code < 400){",
									"    // DATA",
									"    var receivedData = JSON.parse(responseBody);",
									"    var id = receivedData.id;",
									"    var sentData = JSON.parse(request.data);",
									"    var requiredFields = [\"id\",\"name\",\"description\",\"status\",\"isBundle\",\"isCustomerVisible\",\"productOffering\"];",
									"",
									"    //TESTS",
									"    tests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\")",
									"    tests[\"Response contains ID\"] = findFieldInBody('id',receivedData);",
									"    tests[\"Response contains all required fields\"] = findFieldsInBody(requiredFields,receivedData);",
									"    tests[\"Response contains location header\"] = responseHeaders.hasOwnProperty(\"Location\");",
									"    tests[\"Location header is correct\"] = responseHeaders.hasOwnProperty(\"Location\") && (postman.getResponseHeader(\"Location\").toString() == \"/product/\"+id || //relative",
									"    postman.getResponseHeader(\"Location\").toString() == getUrlFromEnvironment('{{productInventoryApi}}') + \"/product/\"+id);   //absolute",
									"    tests[\"POST Body Response equals Request Body\"] = objectEquals(sentData, receivedData);",
									"",
									"    //PREPARATION FOR FOLLOWING TESTS",
									"    postman.setGlobalVariable(\"productId\", receivedData.id.toString());",
									"    postman.setGlobalVariable(\"productRequest\", request.data);",
									"    ",
									"}",
									"",
									"//HELPING FUNCTIONS",
									"/* testing for equality v2 may have more properties than v1 but not less */",
									"function objectEquals(v1, v2) {",
									"    if (typeof(v1) === \"function\") {",
									"        return v1.toString() === v2.toString();",
									"    }",
									"    else if (v1 instanceof Object && v2 instanceof Object) {",
									"        var r = true;",
									"        for (var k in v1) {",
									"            r = objectEquals(v1[k], v2[k]);",
									"            if (!r) {",
									"                //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;",
									"                //tests[\"type1 \" + typeof(v1[k]) + \" type2 \" + typeof(v2[k])] = false;",
									"                return false;",
									"            }",
									"        }",
									"        return true;",
									"    }",
									"    else return v1 === v2;",
									"}",
									"",
									"function findElementInList(elementId,list){",
									"    for (var i = 0; i < list.length; i++){",
									"        if (list[i].id == elementId)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldInBody(field,body){",
									"    for (var key in body){",
									"        if (key == field)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldsInBody(fields,body){",
									"    if (Object.prototype.toString.call(body) === '[object Array]'){",
									"        for (var i = 0; i < body.length; i++){",
									"            findFieldsInBody(fields,body[i]);",
									"        }",
									"    }",
									"    else for (var k = 0; k < fields.length; k++){",
									"        if (!findFieldInBody(fields[k],body)){",
									"            tests[\"An element is missing the field \" + fields[k]] = false;",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"function getPositionOfElementInList(elementId,list){",
									"    for (var i = 0; i < list.length; i++){",
									"        if (list[i].id == elementId)",
									"            return i;",
									"    }",
									"    return -1;",
									"}",
									"",
									"function getUrlFromEnvironment(url){",
									"    if (url.indexOf('{{') >= 0){",
									"        part1 = url.substring(0,url.indexOf('{{'));",
									"        part2 = url.substring(url.indexOf('{{')+2,url.indexOf('}}'));",
									"        part3 = url.substring(url.indexOf('}}')+2,url.length);",
									"        return getUrlFromEnvironment(part1) + getUrlFromEnvironment(environment[part2]) + getUrlFromEnvironment(part3);",
									"    }",
									"    else return url;",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{productInventoryApi}}/product",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Samsung Galaxy S4\",\r\n\t\"description\": \"Description of the instantiated handset product\",\r\n\t\"status\": \"Created\",\r\n\t\"isBundle\": \"false\",\r\n\t\"isCustomerVisible\":\"false\",\r\n\t\"productSerialNumber\": \"59745034OOR030\",\r\n\t\"productOffering\": {\r\n\t\t\"id\": \"http://server:port/catalogApi/productOffering/22\",\r\n\t\t\"name\": \"My Quick BB Offer\"\r\n\t}\r\n}\r\n"
						},
						"description": "Server returns 4xx error when Product creation request is missing mandatory information"
					},
					"response": []
				},
				{
					"name": "/product/{{id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (responseCode.code < 400){",
									"    // DATA",
									"    var receivedData = JSON.parse(responseBody);",
									"    var id = receivedData.id;",
									"    var sentData = JSON.parse(request.data);",
									"    var requiredFields = [\"id\",\"name\",\"description\",\"status\",\"isBundle\",\"isCustomerVisible\",\"productOffering\"];",
									"",
									"    //TESTS",
									"    tests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\")",
									"    tests[\"Response contains ID\"] = findFieldInBody('id',receivedData);",
									"    tests[\"Response contains all required fields\"] = findFieldsInBody(requiredFields,receivedData);",
									"    tests[\"Response contains location header\"] = responseHeaders.hasOwnProperty(\"Location\");",
									"    tests[\"Location header is correct\"] = responseHeaders.hasOwnProperty(\"Location\") && (postman.getResponseHeader(\"Location\").toString() == \"/product/\"+id || //relative",
									"    postman.getResponseHeader(\"Location\").toString() == getUrlFromEnvironment('{{productInventoryApi}}') + \"/product/\"+id);   //absolute",
									"    tests[\"PUT Body Response equals Request Body\"] = objectEquals(sentData, receivedData);",
									"",
									"    //PREPARATION FOR FOLLOWING TESTS",
									"    ",
									"}",
									"",
									"//HELPING FUNCTIONS",
									"/* testing for equality v2 may have more properties than v1 but not less */",
									"function objectEquals(v1, v2) {",
									"    if (typeof(v1) === \"function\") {",
									"        return v1.toString() === v2.toString();",
									"    }",
									"    else if (v1 instanceof Object && v2 instanceof Object) {",
									"        var r = true;",
									"        for (var k in v1) {",
									"            r = objectEquals(v1[k], v2[k]);",
									"            if (!r) {",
									"                //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;",
									"                //tests[\"type1 \" + typeof(v1[k]) + \" type2 \" + typeof(v2[k])] = false;",
									"                return false;",
									"            }",
									"        }",
									"        return true;",
									"    }",
									"    else return v1 === v2;",
									"}",
									"",
									"function findElementInList(elementId,list){",
									"    for (var i = 0; i < list.length; i++){",
									"        if (list[i].id == elementId)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldInBody(field,body){",
									"    for (var key in body){",
									"        if (key == field)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldsInBody(fields,body){",
									"    if (Object.prototype.toString.call(body) === '[object Array]'){",
									"        for (var i = 0; i < body.length; i++){",
									"            findFieldsInBody(fields,body[i]);",
									"        }",
									"    }",
									"    else for (var k = 0; k < fields.length; k++){",
									"        if (!findFieldInBody(fields[k],body)){",
									"            tests[\"An element is missing the field \" + fields[k]] = false;",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"function getPositionOfElementInList(elementId,list){",
									"    for (var i = 0; i < list.length; i++){",
									"        if (list[i].id == elementId)",
									"            return i;",
									"    }",
									"    return -1;",
									"}",
									"",
									"function getUrlFromEnvironment(url){",
									"    if (url.indexOf('{{') >= 0){",
									"        part1 = url.substring(0,url.indexOf('{{'));",
									"        part2 = url.substring(url.indexOf('{{')+2,url.indexOf('}}'));",
									"        part3 = url.substring(url.indexOf('}}')+2,url.length);",
									"        return getUrlFromEnvironment(part1) + getUrlFromEnvironment(environment[part2]) + getUrlFromEnvironment(part3);",
									"    }",
									"    else return url;",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{productInventoryApi}}/product/{{productId}}",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Nexus6P\",\r\n\t\"description\": \"Description of the instantiated handset product\",\r\n\t\"status\": \"Active\",\r\n\t\"isBundle\": \"false\",\r\n\t\"isCustomerVisible\":\"false\",\r\n\t\"productSerialNumber\": \"59745034OOR030\",\r\n\t\"productOffering\": {\r\n\t\t\"id\": \"http://server:port/catalogApi/productOffering/22\",\r\n\t\t\"name\": \"My Quick BB Offer\"\r\n\t}\r\n}\r\n"
						},
						"description": "Server returns 4xx error when Product creation request is missing mandatory information"
					},
					"response": []
				}
			]
		},
		{
			"name": "TC_Prod_N3 - Search for Products with specific characteristics",
			"description": "Return the Product objects that satisfy the supplied search criteria",
			"item": [
				{
					"name": "/product",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (responseCode.code < 400){",
									"    // DATA",
									"    var receivedData = JSON.parse(responseBody);",
									"    var id = receivedData.id;",
									"    var sentData = JSON.parse(request.data);",
									"    var requiredFields = [\"id\",\"name\",\"description\",\"status\",\"isBundle\",\"isCustomerVisible\",\"productOffering\"];",
									"",
									"    //TESTS",
									"    tests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\")",
									"    tests[\"Response contains ID\"] = findFieldInBody('id',receivedData);",
									"    tests[\"Response contains all required fields\"] = findFieldsInBody(requiredFields,receivedData);",
									"    tests[\"Response contains location header\"] = responseHeaders.hasOwnProperty(\"Location\");",
									"    tests[\"Location header is correct\"] = responseHeaders.hasOwnProperty(\"Location\") && (postman.getResponseHeader(\"Location\").toString() == \"/product/\"+id || //relative",
									"    postman.getResponseHeader(\"Location\").toString() == getUrlFromEnvironment('{{productInventoryApi}}') + \"/product/\"+id);   //absolute",
									"    tests[\"POST Body Response equals Request Body\"] = objectEquals(sentData, receivedData);",
									"",
									"    //PREPARATION FOR FOLLOWING TESTS",
									"    postman.setGlobalVariable(\"productId\", receivedData.id.toString());",
									"    postman.setGlobalVariable(\"productRequest\", request.data);",
									"    ",
									"}",
									"",
									"//HELPING FUNCTIONS",
									"/* testing for equality v2 may have more properties than v1 but not less */",
									"function objectEquals(v1, v2) {",
									"    if (typeof(v1) === \"function\") {",
									"        return v1.toString() === v2.toString();",
									"    }",
									"    else if (v1 instanceof Object && v2 instanceof Object) {",
									"        var r = true;",
									"        for (var k in v1) {",
									"            r = objectEquals(v1[k], v2[k]);",
									"            if (!r) {",
									"                //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;",
									"                //tests[\"type1 \" + typeof(v1[k]) + \" type2 \" + typeof(v2[k])] = false;",
									"                return false;",
									"            }",
									"        }",
									"        return true;",
									"    }",
									"    else return v1 === v2;",
									"}",
									"",
									"function findElementInList(elementId,list){",
									"    for (var i = 0; i < list.length; i++){",
									"        if (list[i].id == elementId)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldInBody(field,body){",
									"    for (var key in body){",
									"        if (key == field)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldsInBody(fields,body){",
									"    if (Object.prototype.toString.call(body) === '[object Array]'){",
									"        for (var i = 0; i < body.length; i++){",
									"            findFieldsInBody(fields,body[i]);",
									"        }",
									"    }",
									"    else for (var k = 0; k < fields.length; k++){",
									"        if (!findFieldInBody(fields[k],body)){",
									"            tests[\"An element is missing the field \" + fields[k]] = false;",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"function getPositionOfElementInList(elementId,list){",
									"    for (var i = 0; i < list.length; i++){",
									"        if (list[i].id == elementId)",
									"            return i;",
									"    }",
									"    return -1;",
									"}",
									"",
									"function getUrlFromEnvironment(url){",
									"    if (url.indexOf('{{') >= 0){",
									"        part1 = url.substring(0,url.indexOf('{{'));",
									"        part2 = url.substring(url.indexOf('{{')+2,url.indexOf('}}'));",
									"        part3 = url.substring(url.indexOf('}}')+2,url.length);",
									"        return getUrlFromEnvironment(part1) + getUrlFromEnvironment(environment[part2]) + getUrlFromEnvironment(part3);",
									"    }",
									"    else return url;",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{productInventoryApi}}/product",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Samsung Galaxy S4\",\r\n\t\"description\": \"Description of the instantiated handset product\",\r\n\t\"status\": \"Created\",\r\n\t\"isBundle\": \"false\",\r\n\t\"isCustomerVisible\":\"false\",\r\n\t\"productSerialNumber\": \"59745034OOR030\",\r\n\t\"productOffering\": {\r\n\t\t\"id\": \"http://server:port/catalogApi/productOffering/22\",\r\n\t\t\"name\": \"My Quick BB Offer\"\r\n\t}\r\n}\r\n"
						},
						"description": "Server returns 4xx error when Product creation request is missing mandatory information"
					},
					"response": []
				},
				{
					"name": "product/{{id}}?fields=name,description,isBundle copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// DATA",
									"var receivedData = JSON.parse(responseBody);",
									"var id = postman.getGlobalVariable(\"productId\");",
									"var lastRequest = JSON.parse(postman.getGlobalVariable(\"productRequest\"));",
									"var queryParams = URLToArray(request.url);",
									"var fields = queryParams[\"fields\"].split(',');fields.push('id');// ID is always returned",
									"var requiredFields = [\"id\",\"name\",\"description\",\"isBundle\"];",
									"",
									"//TESTS",
									"tests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response only contains chosen fields\"] = checkFields(fields,receivedData);",
									"tests[\"Element contained equals previous creation\"] = filteredObjectEquals(lastRequest, receivedData);",
									"",
									"//PREPARATION FOR FOLLOWING TESTS",
									"",
									"",
									"//HELPING FUNCTIONS",
									"/* testing for equality v2 may have more properties than v1 but not less */",
									"function filteredObjectEquals(v1, v2) {",
									"    if (v1 === undefined || v2 === undefined)",
									"        return true;",
									"    else if (typeof(v1) === \"function\") ",
									"        return v1.toString() === v2.toString();",
									"    else if (v1 instanceof Object && v2 instanceof Object) {",
									"        var r = true;",
									"        for (var k in v1) {",
									"            r = filteredObjectEquals(v1[k], v2[k]);",
									"            if (!r) ",
									"                return false;",
									"        }",
									"        return true;",
									"    }",
									"    else return v1 === v2;",
									"}",
									"",
									"function checkFields(fields,body){",
									"    for (var key in body)",
									"        if (fields.indexOf(key) < 0)",
									"            return false;",
									"    return true;",
									"}",
									"",
									"function URLToArray(url) {",
									"    var request = {};",
									"    var pairs = url.substring(url.indexOf('?') + 1).split('&');",
									"    for (var i = 0; i < pairs.length; i++) {",
									"        if(!pairs[i])",
									"            continue;",
									"        var pair = pairs[i].split('=');",
									"        request[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);",
									"     }",
									"     return request;",
									"}",
									"",
									"function getUrlFromEnvironment(url){",
									"    if (url.indexOf('{{') >= 0){",
									"        part1 = url.substring(0,url.indexOf('{{'));",
									"        part2 = url.substring(url.indexOf('{{')+2,url.indexOf('}}'));",
									"        part3 = url.substring(url.indexOf('}}')+2,url.length);",
									"        return getUrlFromEnvironment(part1) + getUrlFromEnvironment(environment[part2]) + getUrlFromEnvironment(part3);",
									"    }",
									"    else return url;",
									"}",
									"",
									"function findFieldInBody(field,body){",
									"    for (var key in body){",
									"        if (key == field)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldsInBody(fields,body){",
									"    if (Object.prototype.toString.call(body) === '[object Array]'){",
									"        for (var i = 0; i < body.length; i++){",
									"            findFieldsInBody(fields,body[i]);",
									"        }",
									"    }",
									"    else for (var k = 0; k < fields.length; k++){",
									"        if (!findFieldInBody(fields[k],body)){",
									"            tests[\"An element is missing the field \" + fields[k]] = false;",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{productInventoryApi}}/product/{{productId}}?fields=name,description,isBundle",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"sdfsdf\",\r\n    \"description\": \"sdfsdf\",\r\n    \"isBundle\": false,\r\n    \"lifecycleStatus\": \"Active\",\r\n    \"validFor\":\r\n    {\r\n        \"startDateTime\": \"2020-01-20T00:00:00.000+0000\",\r\n        \"endDateTime\": \"2050-01-20T00:00:00.000+0000\"\r\n    },\r\n    \"productSpecification\":\r\n     {\r\n        \"id\": \"11\",\r\n        \"name\": \"Product11\"\r\n    },\r\n    \"version\": \"2.0\"\r\n}\r\n"
						},
						"description": "Retrieve only the desired Product fields"
					},
					"response": []
				}
			]
		},
		{
			"name": "TC_Prod_N4 - Filtered retrieval of Products",
			"description": "Retrieve only those products that satisfy the supplied filter criteria",
			"item": [
				{
					"name": "/product",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (responseCode.code < 400){",
									"    // DATA",
									"    var receivedData = JSON.parse(responseBody);",
									"    var id = receivedData.id;",
									"    var sentData = JSON.parse(request.data);",
									"    var requiredFields = [\"id\",\"name\",\"description\",\"status\",\"isBundle\",\"isCustomerVisible\",\"productOffering\"];",
									"",
									"    //TESTS",
									"    tests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\")",
									"    tests[\"Response contains ID\"] = findFieldInBody('id',receivedData);",
									"    tests[\"Response contains all required fields\"] = findFieldsInBody(requiredFields,receivedData);",
									"    tests[\"Response contains location header\"] = responseHeaders.hasOwnProperty(\"Location\");",
									"    tests[\"Location header is correct\"] = responseHeaders.hasOwnProperty(\"Location\") && (postman.getResponseHeader(\"Location\").toString() == \"/product/\"+id || //relative",
									"    postman.getResponseHeader(\"Location\").toString() == getUrlFromEnvironment('{{productInventoryApi}}') + \"/product/\"+id);   //absolute",
									"    tests[\"POST Body Response equals Request Body\"] = objectEquals(sentData, receivedData);",
									"",
									"    //PREPARATION FOR FOLLOWING TESTS",
									"    postman.setGlobalVariable(\"productId\", receivedData.id.toString());",
									"    postman.setGlobalVariable(\"productRequest\", request.data);",
									"    ",
									"}",
									"",
									"//HELPING FUNCTIONS",
									"/* testing for equality v2 may have more properties than v1 but not less */",
									"function objectEquals(v1, v2) {",
									"    if (typeof(v1) === \"function\") {",
									"        return v1.toString() === v2.toString();",
									"    }",
									"    else if (v1 instanceof Object && v2 instanceof Object) {",
									"        var r = true;",
									"        for (var k in v1) {",
									"            r = objectEquals(v1[k], v2[k]);",
									"            if (!r) {",
									"                //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;",
									"                //tests[\"type1 \" + typeof(v1[k]) + \" type2 \" + typeof(v2[k])] = false;",
									"                return false;",
									"            }",
									"        }",
									"        return true;",
									"    }",
									"    else return v1 === v2;",
									"}",
									"",
									"function findElementInList(elementId,list){",
									"    for (var i = 0; i < list.length; i++){",
									"        if (list[i].id == elementId)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldInBody(field,body){",
									"    for (var key in body){",
									"        if (key == field)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldsInBody(fields,body){",
									"    if (Object.prototype.toString.call(body) === '[object Array]'){",
									"        for (var i = 0; i < body.length; i++){",
									"            findFieldsInBody(fields,body[i]);",
									"        }",
									"    }",
									"    else for (var k = 0; k < fields.length; k++){",
									"        if (!findFieldInBody(fields[k],body)){",
									"            tests[\"An element is missing the field \" + fields[k]] = false;",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"function getPositionOfElementInList(elementId,list){",
									"    for (var i = 0; i < list.length; i++){",
									"        if (list[i].id == elementId)",
									"            return i;",
									"    }",
									"    return -1;",
									"}",
									"",
									"function getUrlFromEnvironment(url){",
									"    if (url.indexOf('{{') >= 0){",
									"        part1 = url.substring(0,url.indexOf('{{'));",
									"        part2 = url.substring(url.indexOf('{{')+2,url.indexOf('}}'));",
									"        part3 = url.substring(url.indexOf('}}')+2,url.length);",
									"        return getUrlFromEnvironment(part1) + getUrlFromEnvironment(environment[part2]) + getUrlFromEnvironment(part3);",
									"    }",
									"    else return url;",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{productInventoryApi}}/product",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Samsung Galaxy S4\",\r\n\t\"description\": \"Description of the instantiated handset product\",\r\n\t\"status\": \"Created\",\r\n\t\"isBundle\": \"false\",\r\n\t\"isCustomerVisible\":\"false\",\r\n\t\"productSerialNumber\": \"59745034OOR030\",\r\n\t\"productOffering\": {\r\n\t\t\"id\": \"http://server:port/catalogApi/productOffering/22\",\r\n\t\t\"name\": \"My Quick BB Offer\"\r\n\t}\r\n}\r\n"
						},
						"description": "Server returns 4xx error when Product creation request is missing mandatory information"
					},
					"response": []
				},
				{
					"name": "product/{{id}}?fields=description",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// DATA",
									"var receivedData = JSON.parse(responseBody);",
									"var id = postman.getGlobalVariable(\"productId\");",
									"var lastRequest = JSON.parse(postman.getGlobalVariable(\"productRequest\"));",
									"var queryParams = URLToArray(request.url);",
									"var fields = queryParams[\"fields\"].split(',');fields.push('id');// ID is always returned",
									"var requiredFields = [\"id\",\"description\"];",
									"",
									"//TESTS",
									"tests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response only contains chosen fields\"] = checkFields(fields,receivedData);",
									"tests[\"Element contained equals previous creation\"] = filteredObjectEquals(lastRequest, receivedData);",
									"",
									"//PREPARATION FOR FOLLOWING TESTS",
									"",
									"",
									"//HELPING FUNCTIONS",
									"/* testing for equality v2 may have more properties than v1 but not less */",
									"function filteredObjectEquals(v1, v2) {",
									"    if (v1 === undefined || v2 === undefined)",
									"        return true;",
									"    else if (typeof(v1) === \"function\") ",
									"        return v1.toString() === v2.toString();",
									"    else if (v1 instanceof Object && v2 instanceof Object) {",
									"        var r = true;",
									"        for (var k in v1) {",
									"            r = filteredObjectEquals(v1[k], v2[k]);",
									"            if (!r) ",
									"                return false;",
									"        }",
									"        return true;",
									"    }",
									"    else return v1 === v2;",
									"}",
									"",
									"function checkFields(fields,body){",
									"    for (var key in body)",
									"        if (fields.indexOf(key) < 0)",
									"            return false;",
									"    return true;",
									"}",
									"",
									"function URLToArray(url) {",
									"    var request = {};",
									"    var pairs = url.substring(url.indexOf('?') + 1).split('&');",
									"    for (var i = 0; i < pairs.length; i++) {",
									"        if(!pairs[i])",
									"            continue;",
									"        var pair = pairs[i].split('=');",
									"        request[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);",
									"     }",
									"     return request;",
									"}",
									"",
									"function getUrlFromEnvironment(url){",
									"    if (url.indexOf('{{') >= 0){",
									"        part1 = url.substring(0,url.indexOf('{{'));",
									"        part2 = url.substring(url.indexOf('{{')+2,url.indexOf('}}'));",
									"        part3 = url.substring(url.indexOf('}}')+2,url.length);",
									"        return getUrlFromEnvironment(part1) + getUrlFromEnvironment(environment[part2]) + getUrlFromEnvironment(part3);",
									"    }",
									"    else return url;",
									"}",
									"",
									"function findFieldInBody(field,body){",
									"    for (var key in body){",
									"        if (key == field)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldsInBody(fields,body){",
									"    if (Object.prototype.toString.call(body) === '[object Array]'){",
									"        for (var i = 0; i < body.length; i++){",
									"            findFieldsInBody(fields,body[i]);",
									"        }",
									"    }",
									"    else for (var k = 0; k < fields.length; k++){",
									"        if (!findFieldInBody(fields[k],body)){",
									"            tests[\"An element is missing the field \" + fields[k]] = false;",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{productInventoryApi}}/product/{{productId}}?fields=description",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"sdfsdf\",\r\n    \"description\": \"sdfsdf\",\r\n    \"isBundle\": false,\r\n    \"lifecycleStatus\": \"Active\",\r\n    \"validFor\":\r\n    {\r\n        \"startDateTime\": \"2020-01-20T00:00:00.000+0000\",\r\n        \"endDateTime\": \"2050-01-20T00:00:00.000+0000\"\r\n    },\r\n    \"productSpecification\":\r\n     {\r\n        \"id\": \"11\",\r\n        \"name\": \"Product11\"\r\n    },\r\n    \"version\": \"2.0\"\r\n}\r\n"
						},
						"description": "Retrieve only the Product descriptions field"
					},
					"response": []
				},
				{
					"name": "product/{{id}}?fields=name,description,isBundle",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// DATA",
									"var receivedData = JSON.parse(responseBody);",
									"var id = postman.getGlobalVariable(\"productId\");",
									"var lastRequest = JSON.parse(postman.getGlobalVariable(\"productRequest\"));",
									"var queryParams = URLToArray(request.url);",
									"var fields = queryParams[\"fields\"].split(',');fields.push('id');// ID is always returned",
									"var requiredFields = [\"id\",\"name\",\"description\",\"isBundle\"];",
									"",
									"//TESTS",
									"tests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response only contains chosen fields\"] = checkFields(fields,receivedData);",
									"tests[\"Element contained equals previous creation\"] = filteredObjectEquals(lastRequest, receivedData);",
									"",
									"//PREPARATION FOR FOLLOWING TESTS",
									"",
									"",
									"//HELPING FUNCTIONS",
									"/* testing for equality v2 may have more properties than v1 but not less */",
									"function filteredObjectEquals(v1, v2) {",
									"    if (v1 === undefined || v2 === undefined)",
									"        return true;",
									"    else if (typeof(v1) === \"function\") ",
									"        return v1.toString() === v2.toString();",
									"    else if (v1 instanceof Object && v2 instanceof Object) {",
									"        var r = true;",
									"        for (var k in v1) {",
									"            r = filteredObjectEquals(v1[k], v2[k]);",
									"            if (!r) ",
									"                return false;",
									"        }",
									"        return true;",
									"    }",
									"    else return v1 === v2;",
									"}",
									"",
									"function checkFields(fields,body){",
									"    for (var key in body)",
									"        if (fields.indexOf(key) < 0)",
									"            return false;",
									"    return true;",
									"}",
									"",
									"function URLToArray(url) {",
									"    var request = {};",
									"    var pairs = url.substring(url.indexOf('?') + 1).split('&');",
									"    for (var i = 0; i < pairs.length; i++) {",
									"        if(!pairs[i])",
									"            continue;",
									"        var pair = pairs[i].split('=');",
									"        request[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);",
									"     }",
									"     return request;",
									"}",
									"",
									"function getUrlFromEnvironment(url){",
									"    if (url.indexOf('{{') >= 0){",
									"        part1 = url.substring(0,url.indexOf('{{'));",
									"        part2 = url.substring(url.indexOf('{{')+2,url.indexOf('}}'));",
									"        part3 = url.substring(url.indexOf('}}')+2,url.length);",
									"        return getUrlFromEnvironment(part1) + getUrlFromEnvironment(environment[part2]) + getUrlFromEnvironment(part3);",
									"    }",
									"    else return url;",
									"}",
									"",
									"function findFieldInBody(field,body){",
									"    for (var key in body){",
									"        if (key == field)",
									"            return true;",
									"    }",
									"    return false;",
									"}",
									"",
									"function findFieldsInBody(fields,body){",
									"    if (Object.prototype.toString.call(body) === '[object Array]'){",
									"        for (var i = 0; i < body.length; i++){",
									"            findFieldsInBody(fields,body[i]);",
									"        }",
									"    }",
									"    else for (var k = 0; k < fields.length; k++){",
									"        if (!findFieldInBody(fields[k],body)){",
									"            tests[\"An element is missing the field \" + fields[k]] = false;",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{productInventoryApi}}/product/{{productId}}?fields=name,description,isBundle",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"sdfsdf\",\r\n    \"description\": \"sdfsdf\",\r\n    \"isBundle\": false,\r\n    \"lifecycleStatus\": \"Active\",\r\n    \"validFor\":\r\n    {\r\n        \"startDateTime\": \"2020-01-20T00:00:00.000+0000\",\r\n        \"endDateTime\": \"2050-01-20T00:00:00.000+0000\"\r\n    },\r\n    \"productSpecification\":\r\n     {\r\n        \"id\": \"11\",\r\n        \"name\": \"Product11\"\r\n    },\r\n    \"version\": \"2.0\"\r\n}\r\n"
						},
						"description": "Retrieve only the desired Product fields"
					},
					"response": []
				}
			]
		}
	]
}